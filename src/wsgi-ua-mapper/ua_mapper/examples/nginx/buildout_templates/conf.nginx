server {
    listen ${port};
    server_name ${buildout:server-name}; 

    # Static resources.
    location ^~ /media/ {
        alias   ${media-root}/;
        expires 31d;
    }
    
    # Looks up device class in Memcached.
    location /mapper/map-request/ {
        # Query Memchached.
        default_type       text/plain;
        set_md5 $memcached_key $http_user_agent;
        memcached_pass     ${memcached:interface}:${memcached:port};
        # On cache miss query Django.
        error_page         404 405 500 502 @mapper;
    }
    
    # Looks up device class in Django.
    location @mapper {
        default_type    text/plain;
        fastcgi_pass    ${fcgi-high:host}:${fcgi-high:port};
        fastcgi_param   GATEWAY_INTERFACE   CGI/1.1;
        fastcgi_param   DOCUMENT_URI        $document_uri;
        fastcgi_param   DOCUMENT_ROOT       $document_root;
        fastcgi_param   REQUEST_METHOD      $request_method;
        fastcgi_param   REQUEST_URI         $request_uri;
        fastcgi_param   REMOTE_ADDR         $remote_addr;
        fastcgi_param   REMOTE_PORT         $remote_port;
        fastcgi_param   QUERY_STRING        $query_string;
        fastcgi_param   CONTENT_TYPE        $content_type;
        fastcgi_param   CONTENT_LENGTH      $content_length;
        fastcgi_param   SERVER_ADDR         $server_addr;
        fastcgi_param   SERVER_PROTOCOL     $server_protocol;
        fastcgi_param   SERVER_PORT         $server_port;
        fastcgi_param   SERVER_NAME         $server_name;
        fastcgi_param   SERVER_SOFTWARE     nginx/$nginx_version;
        fastcgi_param   PATH_INFO           $fastcgi_script_name;
    }
    
    # Determine device class and forward to approrpiate instance.
    location / {
        # Lookup device class.
        set $instance "";
        access_by_lua '
            local device_class = ngx.location.capture("/mapper/map-request/").body
            if device_class == "" or category == "medium" then
                ngx.var.instance = "${fcgi-medium:host}:${fcgi-medium:port}"
            else
                ngx.var.instance = "${fcgi-high:host}:${fcgi-high:port}"
            end
            ngx.exit(ngx.OK)
        ';
        
        fastcgi_pass    $instance;
        fastcgi_param   GATEWAY_INTERFACE   CGI/1.1;
        fastcgi_param   DOCUMENT_URI        $document_uri;
        fastcgi_param   DOCUMENT_ROOT       $document_root;
        fastcgi_param   REQUEST_METHOD      $request_method;
        fastcgi_param   REQUEST_URI         $request_uri;
        fastcgi_param   REMOTE_ADDR         $remote_addr;
        fastcgi_param   REMOTE_PORT         $remote_port;
        fastcgi_param   QUERY_STRING        $query_string;
        fastcgi_param   CONTENT_TYPE        $content_type;
        fastcgi_param   CONTENT_LENGTH      $content_length;
        fastcgi_param   SERVER_ADDR         $server_addr;
        fastcgi_param   SERVER_PROTOCOL     $server_protocol;
        fastcgi_param   SERVER_PORT         $server_port;
        fastcgi_param   SERVER_NAME         $server_name;
        fastcgi_param   SERVER_SOFTWARE     nginx/$nginx_version;
        fastcgi_param   PATH_INFO           $fastcgi_script_name;
    }
    
    # logging
    access_log  ${buildout:directory}/log/access.log;
    error_log   ${buildout:directory}/log/error.log;
}
